IDE - Integrated Dev Env -- Eclipse , Netbeans, BlueJ, IntelliJ

JDk -- 1.8 

datatypes -- Primitive
	 byte short int long
	 float double (default) -- Eg: 3.145

	3.145f
	char -- 2 bytes  - 0 to 65535  - unicode -- hexadecimal -
	
	65 -- 0041

	boolean -- true or false

Reference types -- Predefined arrays/interfaces/classes -- String, Integer,Number,Byte,System,Date etc.

String s1 = "Hello"

Operators:
		+ - * / % 
		++ -- 
		+= -= *= /=

Logical : && || ! & | 

command line arguments : 
java Sample 12 24

args[0] args[1] .. so on
	args.length -- 2

Integer.parseInt(args[0])
Double.parseDouble(args[0])

Static method -- method that is called with the class name

	java Sample -- Sample.main() -- static 


public boolean isPrime(int number)  
	    {
start loop: ctr=2 till number/2
	    	// if number % ctr ==0  
		return false;
end loop:
		return true;
	    	
	    	
	    }

	Eg: 8%2 ==0
	13%2 13%3 4 5 6

arrays:

	int a[] = new int[5]; // [0,0,0,0,0]
	a.length -- size 

Problem : peter has a blue alto car.

Create a class Employee that has name and email and with necessary functionalities.
Create a class Car with model and color as attributes with getters,setters and constructors.
relate these 2 classes using has a relation


Package -- collection of classes, organizing the class files.

	src--com.training --  Employee   -- com.training.Employee

	     com.training1 -- Employee 

	com
	training

instance variables default values -- 0, 0.0 , false, null

problem statement :
A BookStore has collection of books.
Book has isbn,title,price and stock.

price and stock of the Book can be updated.
Book details can be retrieved.

assignment 2 and 7 in classes and objects.

problem statement :
Create a family of classes : Person --(name,dob)
	Customer -- WalletBalance
	Employee -- empId, salary
	SportsPerson -- rewardpoints

Inheritance
protected and public members are inherited in any package in the project
no specifier members are inherited/accessible only in the same package
private members are not inherited
static members are not inherited (dont participate in OOP)
constructors are not inherited

Employee e=new Employee();

	Employee e1 = new Employee(); // eligible for gc

//	e1=e;

//	e1=null;

	e=e1;

	All Base classes like Person,Book,Product or any predefined class like String,Math,Date etc.. extend from Object class.

Object class is the super class for all the classes.
		getClass(), equals(), hashcode() , finalize(), toString(),wait(),notify(),notifyAll(),clone()


Method Overriding -- inheritance

	A method of the base class is redefined/customized in the child class.
 
toString() -- Object 

rules

1.  OR method should be of Same Prototype. (return type- method name- signature)
2.   OR method can be liberal but not restrictive 

	protected -- public   valid
	public -- protected , default,private

3.  original method should be visible

	Customer c1= new Customer(...)
	S.o.p(c1)


Overloading --  add(5,7)
		add(4.5,3.6)
		add("hello",10);
		
		methods that have the same name , defined in the same class or in the child class but their signatures are different

polymorphism -- poly morphs -- many forms.
	1. static polymorphism -- Overloading
	2. dynamic polymorphism -- overriding


Object obj = new Person();
	s.o.p(obj); //toString() of Person

	obj = new Customer();
	s.o.p(obj); // toString() of Customer

8.	An Online Store has offers for different types of users. User can be a registered customer, Employee of the Store or a Student.
a.	giveOffers() is a common functionality that gives 10% discount to all Customers , 10% reward points to Employees and 20% discount to all Students.
b.	User has name. Customer has Email.Employee has empCode  and Student has regNo.

c.	Create a Utility Class that calls giveOffers based on the type of User and also prints all the details of User.


	int add(int,int)
	void add(double,double)  -OL

	int add(int,int)
	void add(int,int)   - illegal

final for constants
Final methods cannot be overridden.
final class cannot be extended


	abstract class

1. Base class that has atleast 1 abstract method.
2. abstract method is a specification/prototype that needs to be implemented in the child class
3. Abstract class cannot be instantiated.
	User user = new User(..) // error
4   can be referenced
	User user
5   abstract methods cannot be final
6   abstract class cannot be final
7   can be used in dynamic binding for extendibility.
8.  can have concrete methods

multiple inheritance is not supported.

public class MyFrame extends JFrame
{

}


interface is a construct with specification

	public interface Dog
	{
		public void bark();
	}

	public interface Airplane
	{
		public void flies();
	}
	
class Human implements Dog,Airplane
{
	public void bark()
	{

	//code
	}

	public void flies()
	{
		//code
	}
	
}

	1.  Collection of specification.
	2.  all the methods are abstract and public by default.
	3	cannot be instantiated
	4    Dynamic binding.
	5.   can extend from multiple interfaces
		interface C extend A,B
	6 class D implements C

Create an interface Payment that has a behavior to makePayment(double amount).

CashPayment,CardPayment and WalletPayment

2.	Create an interface called Operator that has a method operate(int x,int y) that has multiple implementations. operate() can add 2 integers or multiply 2 integers.

Note : instead of int these should work on any  numerical type use Generic Interface

Create a class that implements the above interfaces, and test the same. 


Create an interface MyCollection that stores any element in an array.
has methods:  add(T t) that adds element at the last vacant space.
	      print() prints fro left to right.

create implementation class MyArrayList that adds any type with duplicates also

Create implementation class MySet that adds only unique elements
Test it with a client.

colllections

				Collection (I)

	List (I)		Set (I)         Queue (I)     AbstractCollection (C) -- Stack
	
	ordered			Not Ordered
	indexed                 Not indexed
	duplicates              No duplicates

1. ArrayList                    HashSet
2. LinkedList                   LinkedHashSet (no duplicates but is ordered)
3 Vector

				SortedSet (I)
					-- elements are sorted
				TreeSet
			
Collection -- add,remove,contains,
List -- add(index,element),set,get
Set --	
	
Create a collection of ages of students that are stored in an order.
Create a collection of unique subjects. (HashSet)
Create a collection of unique subjects in an order. (LinkedHashSet)

Create an application for an online book store where a collection of books (use list) is stored.
book has isbn,title,price and stock.

book can be added to the collection
book can be deleted based on isbn
stock of the book can be updated based on isbn
display a book based on isbn
display all books in the store.
display all books based on a search pattern on title Eg : C  -- C,Cplus,CSharp

Classes to be Created : Book , BookStore , Client


	class BookStore{
			ArrayList<Book> books = new ArrayList<>();

	}

TreeSet

Create a TreeSet of Product ( code, name,price)

Stack

complexity -- time -- [4,5,6,3,2,1] -- O(n) - complexity

	username,password
	empid,emp

	Map (key,value)

	[ 1234   ,(1234,"c",120,100)]
	[ 5674,  (5674,"c",120,100)] 

	O(1) -- hashing  -- O(1234)

					Map (I) 
Key, value pairs
Keys are unique                     HashMap (c), LinkedHashMap (c) , Hashtable (c)
values can duplicate
Not ordered                            SortedMap (I)  - keys
				    TreeMap (c)

Map -- put(key,value)
	get(key)
	remove,containsKey,containsValue etc..

1.      Create a Map of Account.
2.	Account has username,password,email,status (boolean)

basic operations on Map

1.	adding an account
2.      remove an account based on username
3.      to activate /deactivate the account
4       view all the accounts.
5	authenticate the user


Arrays  -- searching,max,min,sort,
Collections

java.lang -- default
String,StringBuffer,StringBuilder,System etc..

Strings are immutable in java
	String s1="hello";
	s1=s1+"world";

StringBuffer,LocalDate,Random,Math,String Builder.

Exceptions,Inner classes /nested classes,IO.

	Exceptions 
		Unchecked -- Program compiles.No checking for Exceptions during compile time.
			Eg: NullPointerException,ArithmeticException,ArrayIndexOutOfboundsException.
			All that extends RuntimeException
 
		Checked
			Exceptions that have to be handled.
			Compiletime error.

			IO,SQL,network,stream ,class  --

Problem: Read 2 numbers from command line , divide one by the other.

Problem : Write some text to a file.

	try{

		try{

		}
		catch(..)
		{	
			try
			{

			}
			catch(){ }
		}		

	}	

problem:
	
	 reads from this file.

	Note: initially check if file exists if not create a file through the program

Problem :
		Write a program to write data to a csv file. (comma seperated value) and read from the same.
		
problem: Read a +ve , Non Zero, Single Digit ,number from the keyboard
	validate the input , for invalid input throw a custom exception.
		
	throw

	IO --   ByteStream
		CharacterStream -- Text files

		BufferedReader, FileReader,FileWriter..

writing and reading objects 
Write an Object -- Person person 

Serialization is an internal process of breaking java object to bits and bytes before passivating/writing to a file or network or socket.

class Person implements Serializable
{

}

Serializable is a marker interface - no methods 
	obj instanceof Serializable 


Nested Classes


 Building      Room
   Flower	Petal
 Restaurant	Menu
Person		Address	

composition 
	OuterClass/TopLevel class -- public,default,abstract,final
	NestedClass -- public,private,protected,default,static,abstract,final
	               
		




	